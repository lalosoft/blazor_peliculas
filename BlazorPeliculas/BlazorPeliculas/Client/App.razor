@inject Microsoft.AspNetCore.Components.WebAssembly.Services.LazyAssemblyLoader lazyLoader
@using System.Reflection;


<Router AppAssembly="@typeof(Program).Assembly" AdditionalAssemblies="assemblies" OnNavigateAsync="OnNavigateAsync">
    <Found Context="routeData">
        <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
            <Authorizing>
                <label>Autorizando</label>
            </Authorizing>
        </AuthorizeRouteView>
    </Found>
    <NotFound>
        <CascadingAuthenticationState>
            <LayoutView Layout="@typeof(MainLayout)">
                <CustomNotFound />
            </LayoutView>
        </CascadingAuthenticationState>
    </NotFound>
</Router>

@code {

    private List<Assembly> assemblies = new List<Assembly>();

    private async Task OnNavigateAsync(NavigationContext args)
    {
        if (args.Path.EndsWith("counter"))
        {
            //Agregar dll's solo cuando se vayan a ocupar
            var asembCargados = await lazyLoader.LoadAssembliesAsync(
                new List<string> { "MathNet.Numerics.dll" });

            assemblies.AddRange(asembCargados);
        }
    }
}
