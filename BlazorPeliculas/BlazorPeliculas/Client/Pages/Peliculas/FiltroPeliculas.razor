@page "/peliculas/buscar"
@inject IRepositorio repositorio
@inject NavigationManager NavigationManager

<h3>Filtro Peliculas</h3>

<div class="form-inline">
    <div class="form-group mb-2">
        <label for="titulo" class="sr-only">Título</label>
        <input @bind-value="titulo" @bind-value:event="oninput"
               @onkeypress="@((KeyboardEventArgs e) => TituloKeyPress(e))"
               type="text" class="form-control" id="titulo" placeholder="Título de Pélicula" />
    </div>
    <div class="form-group mx-sm-3 mb-2">
        <select class="form-control" @bind="generoSeleccionado">
            <option value="0">Seleccione un genero--</option>
            @foreach (var item in generos)
            {
                <option value="@item.Id">@item.Nombre</option>
            }
        </select>
    </div>
    <div class="form-group mx-sm-3 mb-2">
        <input type="checkbox" class="form-check-input" id="estrenos" @bind="futurosEstrenos" />
        <label class="form-check-label" for="estrenos">Futuros Estrenos</label>
    </div>
    <div class="form-group mx-sm-3 mb-2">
        <input type="checkbox" class="form-check-input" id="cartelera" @bind="enCartelera" />
        <label class="form-check-label" for="cartelera">En Cartelera</label>
    </div>
    <div class="form-group mx-sm-3 mb-2">
        <input type="checkbox" class="form-check-input" id="masVotadas" @bind="masVotadas" />
        <label class="form-check-label" for="masVotadas">Mas Votadas</label>
    </div>

    <button type="button" class="btn btn-primary mb-2 mx-sm-3" @onclick="CargarNuevasPeliculas">Filtrar</button>
    <button type="button" class="btn btn-danger mb-2" @onclick="LimpiarOnClick">Limpiar</button>
</div>

<ListadoPeliculas Peliculas="Peliculas"/>

<Paginacion PaginaActual="paginaActual" PaginasTotales="paginasTotales" PaginaSeleccionada="PaginaSeleccionada"/>


@code {
    private List<Pelicula> Peliculas;
    string titulo = "";
    string generoSeleccionado = "0";
    private List<Genero> generos = new List<Genero>();
    private bool futurosEstrenos = false;
    private bool enCartelera = false;
    private bool masVotadas = false;
    Dictionary<string, string> queryStringDict = new Dictionary<string, string>();
    private int paginaActual = 1;
    private int paginasTotales;

    protected override async Task OnInitializedAsync()
    {
        await ObtenerGeneros();

        var url = NavigationManager.Uri;
        var queries = NavigationManager.ObtenerQueryStrings(url);

        if(queries == null)
        {
            await RealizarBusqueda(string.Empty);
        }
        else
        {
            queryStringDict = queries;
            LlenarCampos();
            var queryStrings = url.Split(new string[] { "?" }, StringSplitOptions.None)[1];
            await RealizarBusqueda(queryStrings);
        }
    }

    private void LlenarCampos()
    {
        if (queryStringDict.ContainsKey("generoId")) generoSeleccionado = queryStringDict["generoId"];
        if (queryStringDict.ContainsKey("titulo")) titulo = queryStringDict["titulo"];
        if (queryStringDict.ContainsKey("encartelera")) bool.TryParse(queryStringDict["encartelera"], out enCartelera);
        if (queryStringDict.ContainsKey("estrenos")) bool.TryParse(queryStringDict["estrenos"], out futurosEstrenos);
        if (queryStringDict.ContainsKey("masvotadas")) bool.TryParse(queryStringDict["masvotadas"], out masVotadas);
        if (queryStringDict.ContainsKey("pagina")) int.TryParse(queryStringDict["pagina"], out paginaActual);
    }

    private async Task ObtenerGeneros()
    {
        var httpResponse = await repositorio.Get<List<Genero>>("api/generos");
        generos = httpResponse.Response;
    }

    private async Task TituloKeyPress(KeyboardEventArgs e)
    {
        if(e.Key == "Enter")
        {
            await CargarNuevasPeliculas();
        }
    }

    private async Task CargarNuevasPeliculas()
    {
        var queryStrings = GenerarQueryStrings();
        NavigationManager.NavigateTo("/peliculas/buscar");
        await RealizarBusqueda(queryStrings);
    }

    private async Task RealizarBusqueda(string queryStrings)
    {
        var httpResponse = await repositorio.Get<List<Pelicula>>("api/peliculas/filtrar?" + queryStrings);
        paginasTotales = int.Parse(httpResponse.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault());
        Peliculas = httpResponse.Response;
    }

    private string GenerarQueryStrings()
    {
        if(queryStringDict == null)
        {
            queryStringDict = new Dictionary<string, string>();
        }

        queryStringDict["generoId"] = generoSeleccionado;
        queryStringDict["titulo"] = titulo;
        queryStringDict["encartelera"] = enCartelera.ToString();
        queryStringDict["estrenos"] = futurosEstrenos.ToString();
        queryStringDict["masvotadas"] = masVotadas.ToString();
        queryStringDict["pagina"] = paginaActual.ToString();

        var valoresPorDefecto = new List<string>() { "False", "", "0" };

        //generoId=6&titulo=spider...

        return string.Join("&", queryStringDict
                .Where(x => !valoresPorDefecto.Contains(x.Value.ToLower()))
                .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray());
    }

    private async Task PaginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await CargarNuevasPeliculas();
    }

    private async Task LimpiarOnClick()
    {
        titulo = "";
        generoSeleccionado = "0";
        futurosEstrenos = false;
        enCartelera = false;
        masVotadas = false;
        paginaActual = 1;
        await CargarNuevasPeliculas();
   }
}
