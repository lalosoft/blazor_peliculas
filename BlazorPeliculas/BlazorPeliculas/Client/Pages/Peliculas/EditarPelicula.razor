@page "/peliculas/editar/{PeliculaId:int}"
@inject IRepositorio repositorio
@inject NavigationManager navigationManager
@inject IMostrarMensajes mostrarMensaje

<h3>Editar Pelicula</h3>

@if(Pelicula == null)
{
    <text>Cargando...</text>
}
else
{
    <FormularioPeliculas Pelicula="Pelicula" OnValidSubmit="Editar"
        ActoresSeleccionados="ActoresSeleccionados"
        GenerosNoSeleccionados="GenerosNoSeleccionados" 
        GenerosSeleccionados="GenerosSeleccionados"/>
}

@code {
    [Parameter] public int PeliculaId { get; set; }
    Pelicula Pelicula;
    private List<Genero> GenerosNoSeleccionados = new();
    private List<Genero> GenerosSeleccionados = new();
    private List<Persona> ActoresSeleccionados = new();

    protected async override Task OnInitializedAsync()
    {
        var httpResponse = await repositorio.Get<PeliculaActualizacionDTO>($"api/peliculas/actualizar/{PeliculaId}");
        if (httpResponse.Error)
        {
            if(httpResponse.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("");
            }
            else
            {
                await mostrarMensaje.MostrarMensajeError(await httpResponse.GetBody());

            }
        }
        else
        {
            var model = httpResponse.Response;
            ActoresSeleccionados = model.Actores;
            GenerosNoSeleccionados = model.GenerosNoSeleccionados;
            GenerosSeleccionados = model.GenerosSeleccionados;
            Pelicula = model.Pelicula;
        }
    }

    private async Task Editar()
    {
        var httpResponse = await repositorio.Put("api/peliculas", Pelicula);
        if (httpResponse.Error)
        {
            await mostrarMensaje.MostrarMensajeError(await httpResponse.GetBody());
        }
        else
        {
            navigationManager.NavigateTo($"pelicula/{PeliculaId}");
        }
    }
}
